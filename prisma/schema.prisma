// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model HighScore {
  id        Int      @id @default(autoincrement())
  chainId   Int      @map("chain_id")
  playerId  Int      @map("player_id")
  score     Int
  sessionId Int      @map("session_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")
  player    Player   @relation(fields: [playerId], references: [id])

  @@unique([chainId, playerId, sessionId, score])
  @@index([chainId])
  @@index([playerId])
  @@map("high_scores")
}

// Add this model to your existing Prisma schema

model BlockTracker {
  id               Int      @id @default(autoincrement())
  chainId          Int
  contractName     String
  lastScannedBlock String
  updatedAt        DateTime @updatedAt

  @@unique([chainId, contractName])
  @@map("block_tracker")
}

model Player {
  id                   Int               @id @default(autoincrement())
  address              String            @unique @db.VarChar(42)
  fId                  Int?              @unique
  fUsername            String?
  fDisplayName         String?
  fPfpUrl              String?
  fLocationDescription String?
  fLocationPlaceId     String?
  createdAt            DateTime          @default(now()) @map("created_at")
  updatedAt            DateTime          @default(now()) @updatedAt @map("updated_at")
  moves                PlayerMove[]
  highscores           HighScore[]
  cooldown             PlayerCooldown?
  purchases            SessionPurchase[]

  @@index([address])
  @@map("players")
}

model PlayerMove {
  id               Int      @id @default(autoincrement())
  playerId         Int      @map("player_id")
  chainId          Int      @map("chain_id")
  score            Int
  sessionId        Int      @map("session_id")
  verificationHash String   @unique @map("verification_hash")
  txHash           String?  @map("tx_hash")
  createdAt        DateTime @default(now()) @map("created_at")
  updatedAt        DateTime @default(now()) @updatedAt @map("updated_at")
  player           Player   @relation(fields: [playerId], references: [id])

  @@index([chainId])
  @@index([playerId])
  @@map("player_moves")
}

model PlayerCooldown {
  id         Int      @id @default(autoincrement())
  playerId   Int      @map("player_id")
  lastPlayed DateTime @default(now()) @map("last_played")
  player     Player   @relation(fields: [playerId], references: [id])

  @@unique([playerId])
  @@map("player_cooldowns")
}

model SessionPurchase {
  id            Int      @id @default(autoincrement())
  playerId      Int      @map("player_id")
  chainId       Int      @map("chain_id")
  txHash        String   @unique @map("tx_hash")
  paymentMethod String   @map("payment_method")
  quantity      Int
  totalCost     String   @map("total_cost")
  createdAt     DateTime @default(now()) @map("created_at")
  player        Player   @relation(fields: [playerId], references: [id])

  @@map("session_purchases")
}
